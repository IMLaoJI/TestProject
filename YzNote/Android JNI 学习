android studio NDK 开发

---------------------------------------------------------------------------
基础知识:
    JNI（Java Native Interface）:   是方便Java调用C、C++等Native代码所封装的一层接口
    NDK（Native Development Kit）:     是Google提供的一套工具，其中一个特性是提供了交叉编译，即C或者C++不是跨平台的，但通过NDK配置生成的动态库却可以兼容各个平台。比如C在Windows平台编译后生成.exe文件，那么源码通过NDK编译后可以生成在安卓手机上运行的二进制文件.so
        原生开发工具集，是一套允许您使用原生代码语言（例如 C 和 C++）实现程序功能的工具集。
    ABI（Application Binary Interface）：  应用程序二进制接口，不同的CPU支持不同的指令集，CPU与指令集的每种组合都有其自己的应用二进制接口（或ABI），ABI可以非常精确地定义应用的机器代码在运行时如何与系统交互。
    CMake：  Android推荐使用的NDK构建工具，从AS 2.2版本之后开始支持（包含2.2版本）。


开发方式:
    1.使用CMake开发JNI
    2.ndk-build开发JNI
---------------------------------------------------------------------------
    1.使用CMake开发JNI
        基础知识:
            CMake是: 是个一个开源的跨平台自动化建构系统，用来管理软件建置的程序，并不依赖于某特定编译器，并可支持多层目录、多个应用程序与多个库。 它用配置文件控制建构过程
            CMakeLists.txt  :CMakeLists.txt是CMake的构建脚本，作用相当于ndk-build中的Android.mk

        1.环境搭建:   SDK Tools中安装以下组件: 1.Cmake：NDK构建工具   2.Cmake：NDK构建工具     3.NDK：NDK开发工具集
        2.新建C++工程
        3.build出jar包
---------------------------------------------------------------------------


---------------------------------------------------------------------------
    2.ndk-build开发JNI
        Java调C
            1.NDK环境设置
                1.NDK Tools 下载
                2.快捷键配置 (External Tools:javah-jni 和 ndk-build)
            2.Java调C
                1.导包
                2.声明native方法
            3.写C代码
                1.生成头文件     (用快捷键设置的javah)
                2.写C函数
            4.编译生成so文件
                1.新建Android.mk文件和Application.mk文件
                2.编译生成so    (用快捷键设置的ndk-build)

        C调Java
            1.写Java代码
                1.用正常的Java方法一样
            2.写C代码
                1.得到字节码
                2.得到方法id
                3.实例化
                4.调用Java方法
            3.编译生成so文件
---------------------------------------------------------------------------